#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Brokerage_Platform.Models.DBObjects
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TradingDB")]
	public partial class BrokeragePlatformDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertOrderType(OrderType instance);
    partial void UpdateOrderType(OrderType instance);
    partial void DeleteOrderType(OrderType instance);
    partial void InsertTradeItem(TradeItem instance);
    partial void UpdateTradeItem(TradeItem instance);
    partial void DeleteTradeItem(TradeItem instance);
    partial void InsertTrader(Trader instance);
    partial void UpdateTrader(Trader instance);
    partial void DeleteTrader(Trader instance);
    partial void InsertOrder(Order instance);
    partial void UpdateOrder(Order instance);
    partial void DeleteOrder(Order instance);
    #endregion
		
		public BrokeragePlatformDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["TradingDBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BrokeragePlatformDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BrokeragePlatformDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BrokeragePlatformDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BrokeragePlatformDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<OrderType> OrderTypes
		{
			get
			{
				return this.GetTable<OrderType>();
			}
		}
		
		public System.Data.Linq.Table<TradeItem> TradeItems
		{
			get
			{
				return this.GetTable<TradeItem>();
			}
		}
		
		public System.Data.Linq.Table<Trader> Traders
		{
			get
			{
				return this.GetTable<Trader>();
			}
		}
		
		public System.Data.Linq.Table<Order> Orders
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Accounts")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AccNumber;
		
		private System.Nullable<char> _IsActive;
		
		private System.Nullable<System.DateTime> _OpenDate;
		
		private System.Nullable<int> _TradeId;
		
		private EntitySet<TradeItem> _TradeItems;
		
		private EntitySet<Order> _Orders;
		
		private EntityRef<Trader> _Trader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccNumberChanging(int value);
    partial void OnAccNumberChanged();
    partial void OnIsActiveChanging(System.Nullable<char> value);
    partial void OnIsActiveChanged();
    partial void OnOpenDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOpenDateChanged();
    partial void OnTradeIdChanging(System.Nullable<int> value);
    partial void OnTradeIdChanged();
    #endregion
		
		public Account()
		{
			this._TradeItems = new EntitySet<TradeItem>(new Action<TradeItem>(this.attach_TradeItems), new Action<TradeItem>(this.detach_TradeItems));
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._Trader = default(EntityRef<Trader>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccNumber", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AccNumber
		{
			get
			{
				return this._AccNumber;
			}
			set
			{
				if ((this._AccNumber != value))
				{
					this.OnAccNumberChanging(value);
					this.SendPropertyChanging();
					this._AccNumber = value;
					this.SendPropertyChanged("AccNumber");
					this.OnAccNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Char(1)")]
		public System.Nullable<char> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpenDate", DbType="Date")]
		public System.Nullable<System.DateTime> OpenDate
		{
			get
			{
				return this._OpenDate;
			}
			set
			{
				if ((this._OpenDate != value))
				{
					this.OnOpenDateChanging(value);
					this.SendPropertyChanging();
					this._OpenDate = value;
					this.SendPropertyChanged("OpenDate");
					this.OnOpenDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TradeId", DbType="Int")]
		public System.Nullable<int> TradeId
		{
			get
			{
				return this._TradeId;
			}
			set
			{
				if ((this._TradeId != value))
				{
					if (this._Trader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTradeIdChanging(value);
					this.SendPropertyChanging();
					this._TradeId = value;
					this.SendPropertyChanged("TradeId");
					this.OnTradeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_TradeItem", Storage="_TradeItems", ThisKey="AccNumber", OtherKey="AccNumber")]
		public EntitySet<TradeItem> TradeItems
		{
			get
			{
				return this._TradeItems;
			}
			set
			{
				this._TradeItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Order", Storage="_Orders", ThisKey="AccNumber", OtherKey="AccNumber")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Trader_Account", Storage="_Trader", ThisKey="TradeId", OtherKey="Id", IsForeignKey=true)]
		public Trader Trader
		{
			get
			{
				return this._Trader.Entity;
			}
			set
			{
				Trader previousValue = this._Trader.Entity;
				if (((previousValue != value) 
							|| (this._Trader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Trader.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._Trader.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._TradeId = value.Id;
					}
					else
					{
						this._TradeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Trader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TradeItems(TradeItem entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_TradeItems(TradeItem entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderTypes")]
	public partial class OrderType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Type;
		
		private EntitySet<Order> _Orders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    #endregion
		
		public OrderType()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(10)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderType_Order", Storage="_Orders", ThisKey="Id", OtherKey="OrderTypeId")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.OrderType = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.OrderType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TradeItems")]
	public partial class TradeItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ItemId;
		
		private string _Symbol;
		
		private string _Description;
		
		private System.Nullable<int> _AccNumber;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnItemIdChanging(int value);
    partial void OnItemIdChanged();
    partial void OnSymbolChanging(string value);
    partial void OnSymbolChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnAccNumberChanging(System.Nullable<int> value);
    partial void OnAccNumberChanged();
    #endregion
		
		public TradeItem()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ItemId
		{
			get
			{
				return this._ItemId;
			}
			set
			{
				if ((this._ItemId != value))
				{
					this.OnItemIdChanging(value);
					this.SendPropertyChanging();
					this._ItemId = value;
					this.SendPropertyChanged("ItemId");
					this.OnItemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Symbol", DbType="VarChar(5)")]
		public string Symbol
		{
			get
			{
				return this._Symbol;
			}
			set
			{
				if ((this._Symbol != value))
				{
					this.OnSymbolChanging(value);
					this.SendPropertyChanging();
					this._Symbol = value;
					this.SendPropertyChanged("Symbol");
					this.OnSymbolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(20)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccNumber", DbType="Int")]
		public System.Nullable<int> AccNumber
		{
			get
			{
				return this._AccNumber;
			}
			set
			{
				if ((this._AccNumber != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccNumberChanging(value);
					this.SendPropertyChanging();
					this._AccNumber = value;
					this.SendPropertyChanged("AccNumber");
					this.OnAccNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_TradeItem", Storage="_Account", ThisKey="AccNumber", OtherKey="AccNumber", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.TradeItems.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.TradeItems.Add(this);
						this._AccNumber = value.AccNumber;
					}
					else
					{
						this._AccNumber = default(Nullable<int>);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Traders")]
	public partial class Trader : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.Nullable<int> _Age;
		
		private string _BirthPlace;
		
		private EntitySet<Account> _Accounts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAgeChanging(System.Nullable<int> value);
    partial void OnAgeChanged();
    partial void OnBirthPlaceChanging(string value);
    partial void OnBirthPlaceChanged();
    #endregion
		
		public Trader()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(20)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Age", DbType="Int")]
		public System.Nullable<int> Age
		{
			get
			{
				return this._Age;
			}
			set
			{
				if ((this._Age != value))
				{
					this.OnAgeChanging(value);
					this.SendPropertyChanging();
					this._Age = value;
					this.SendPropertyChanged("Age");
					this.OnAgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthPlace", DbType="VarChar(30)")]
		public string BirthPlace
		{
			get
			{
				return this._BirthPlace;
			}
			set
			{
				if ((this._BirthPlace != value))
				{
					this.OnBirthPlaceChanging(value);
					this.SendPropertyChanging();
					this._BirthPlace = value;
					this.SendPropertyChanged("BirthPlace");
					this.OnBirthPlaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Trader_Account", Storage="_Accounts", ThisKey="Id", OtherKey="TradeId")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Trader = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Trader = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Orders")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<System.DateTime> _OpenDate;
		
		private System.Nullable<System.DateTime> _CloseDate;
		
		private System.Nullable<decimal> _Size;
		
		private System.Nullable<decimal> _Price;
		
		private System.Nullable<decimal> _StopLoss;
		
		private System.Nullable<decimal> _TakeProfit;
		
		private System.Nullable<decimal> _Comission;
		
		private System.Nullable<int> _AccNumber;
		
		private System.Nullable<int> _OrderTypeId;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<OrderType> _OrderType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnOpenDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOpenDateChanged();
    partial void OnCloseDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCloseDateChanged();
    partial void OnSizeChanging(System.Nullable<decimal> value);
    partial void OnSizeChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    partial void OnStopLossChanging(System.Nullable<decimal> value);
    partial void OnStopLossChanged();
    partial void OnTakeProfitChanging(System.Nullable<decimal> value);
    partial void OnTakeProfitChanged();
    partial void OnComissionChanging(System.Nullable<decimal> value);
    partial void OnComissionChanged();
    partial void OnAccNumberChanging(System.Nullable<int> value);
    partial void OnAccNumberChanged();
    partial void OnOrderTypeIdChanging(System.Nullable<int> value);
    partial void OnOrderTypeIdChanged();
    #endregion
		
		public Order()
		{
			this._Account = default(EntityRef<Account>);
			this._OrderType = default(EntityRef<OrderType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpenDate", DbType="Date")]
		public System.Nullable<System.DateTime> OpenDate
		{
			get
			{
				return this._OpenDate;
			}
			set
			{
				if ((this._OpenDate != value))
				{
					this.OnOpenDateChanging(value);
					this.SendPropertyChanging();
					this._OpenDate = value;
					this.SendPropertyChanged("OpenDate");
					this.OnOpenDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CloseDate", DbType="Date")]
		public System.Nullable<System.DateTime> CloseDate
		{
			get
			{
				return this._CloseDate;
			}
			set
			{
				if ((this._CloseDate != value))
				{
					this.OnCloseDateChanging(value);
					this.SendPropertyChanging();
					this._CloseDate = value;
					this.SendPropertyChanged("CloseDate");
					this.OnCloseDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Size", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StopLoss", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> StopLoss
		{
			get
			{
				return this._StopLoss;
			}
			set
			{
				if ((this._StopLoss != value))
				{
					this.OnStopLossChanging(value);
					this.SendPropertyChanging();
					this._StopLoss = value;
					this.SendPropertyChanged("StopLoss");
					this.OnStopLossChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TakeProfit", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> TakeProfit
		{
			get
			{
				return this._TakeProfit;
			}
			set
			{
				if ((this._TakeProfit != value))
				{
					this.OnTakeProfitChanging(value);
					this.SendPropertyChanging();
					this._TakeProfit = value;
					this.SendPropertyChanged("TakeProfit");
					this.OnTakeProfitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comission", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Comission
		{
			get
			{
				return this._Comission;
			}
			set
			{
				if ((this._Comission != value))
				{
					this.OnComissionChanging(value);
					this.SendPropertyChanging();
					this._Comission = value;
					this.SendPropertyChanged("Comission");
					this.OnComissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccNumber", DbType="Int")]
		public System.Nullable<int> AccNumber
		{
			get
			{
				return this._AccNumber;
			}
			set
			{
				if ((this._AccNumber != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccNumberChanging(value);
					this.SendPropertyChanging();
					this._AccNumber = value;
					this.SendPropertyChanged("AccNumber");
					this.OnAccNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderTypeId", DbType="Int")]
		public System.Nullable<int> OrderTypeId
		{
			get
			{
				return this._OrderTypeId;
			}
			set
			{
				if ((this._OrderTypeId != value))
				{
					if (this._OrderType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderTypeIdChanging(value);
					this.SendPropertyChanging();
					this._OrderTypeId = value;
					this.SendPropertyChanged("OrderTypeId");
					this.OnOrderTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Order", Storage="_Account", ThisKey="AccNumber", OtherKey="AccNumber", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._AccNumber = value.AccNumber;
					}
					else
					{
						this._AccNumber = default(Nullable<int>);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderType_Order", Storage="_OrderType", ThisKey="OrderTypeId", OtherKey="Id", IsForeignKey=true)]
		public OrderType OrderType
		{
			get
			{
				return this._OrderType.Entity;
			}
			set
			{
				OrderType previousValue = this._OrderType.Entity;
				if (((previousValue != value) 
							|| (this._OrderType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderType.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._OrderType.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._OrderTypeId = value.Id;
					}
					else
					{
						this._OrderTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("OrderType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
